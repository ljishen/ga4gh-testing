---
- name: Initialize An Empty Registry Database
  docker:
    image: "{{ server_image_name }}"
    name: "{{ server_container_name }}"
    state: reloaded
    pull: always
    restart_policy: on-failure
    volumes: "{{ server_volume_host_dir }}:/data:rw"
    command: >
        /usr/local/bin/ga4gh_repo
            init
            /data/{{ registry_db_filename }}
      
- name: Add A Dataset to The Registry
  docker:
    image: "{{ server_image_name }}" 
    name: "{{ server_container_name }}"
    volumes: "{{ server_volume_host_dir }}:/data:rw"
    command: >
        /usr/local/bin/ga4gh_repo
            add-dataset
            /data/{{ registry_db_filename }}
            1kgenomes
            --description "Variants from the 1000 Genomes project and GENCODE genes annotations"

- name: Check Reference Assembly Source File
  stat: path={{ server_volume_host_dir }}/{{ reference_assembly_source_name }}
  register: reference_assembly_source_file

- name: Download Reference Assembly
  # TODO: figure out the reason why download failed by using get_url module
  command: >
    wget -O {{ server_volume_host_dir }}/{{ reference_assembly_source_name }}
        {{ reference_assembly_source_uri }}
  when: not reference_assembly_source_file.stat.exists

- name: Check Reference Assembly File
  stat: path={{ server_volume_host_dir }}/{{ reference_assembly_filename }}
  register: reference_assembly_file

- name: Decompress Reference Assembly
  
  # Right now we have to use the command module to call gunzip
  # because unarchive module does not support for .gz files
  # (See https://github.com/ansible/ansible-modules-core/issues/3241).
  command: >
    gunzip -q {{ server_volume_host_dir }}/{{ reference_assembly_source_name }}
  
  # TODO: check failure reason
  # {"changed": true, "cmd": ["gunzip", "-q", "/ga4gh/srv/data/hs37d5.fa.gz"], "delta": "0:07:08.555351", "end": "2016-06-14 22:46:41.641562", "failed": true, "rc": 2, "start": "2016-06-14 22:39:33.086211", "stderr": "", "stdout": "", "stdout_lines": [], "warnings": []}
  ignore_errors: yes
  
  when: (not reference_assembly_file.stat.exists) or (not reference_assembly_source_file.stat.exists)

- name: Recompress Reference Assembly Using `bgzip`
  docker:
    image: "{{ utility_image_name }}"
    name: "{{ utility_container_name }}"
    volumes: "{{ server_volume_host_dir }}:/data:rw"
    command: >
        /usr/local/bin/bgzip -f --threads 4
            /data/{{ reference_assembly_filename }}
  when: reference_assembly_file.stat.exists

- name: Add Reference Set to Registry
  docker:
    image: "{{ server_image_name }}" 
    name: "{{ server_container_name }}"
    volumes: "{{ server_volume_host_dir }}:/data:rw"
    command: >
        /usr/local/bin/ga4gh_repo
            add-referenceset
            /data/{{ registry_db_filename }}
            /data/{{ reference_assembly_source_name }}
            -d "{{ reference_assembly_name }} assembly of the human genome"
            --ncbiTaxonId 9606
            --name {{ reference_assembly_name }}
            --sourceUri "{{ reference_assembly_source_uri }}" 

- name: Download Sequence Ontology
  get_url:
    url: "{{ sequence_ontology_uri }}"
    dest: "{{ server_volume_host_dir }}/{{ sequence_ontology_source_name }}"
    force: no

- name: Add Sequence Ontology
  docker:
    image: "{{ server_image_name }}"
    name: "{{ server_container_name }}"
    volumes: "{{ server_volume_host_dir }}:/data:rw"
    command: >
        /usr/local/bin/ga4gh_repo
            add-ontology
            /data/{{ registry_db_filename }}
            /data/{{ sequence_ontology_source_name }}
            -n {{ sequence_ontology_name }}

- name: Download Sequence Annotations
  get_url:
    url: "{{ sequence_annotations_uri }}"
    dest: "{{ server_volume_host_dir }}/{{ sequence_annotations_source_name }}"
    force: no

- name: Add Sequence Annotations
  docker:
    image: "{{ server_image_name }}"
    name: "{{ server_container_name }}"
    volumes: "{{ server_volume_host_dir }}:/data:rw"
    command: >
        /usr/local/bin/ga4gh_repo
            add-featureset
            /data/{{ registry_db_filename }}
            1kgenomes
            data/{{ sequence_annotations_source_name }}
            --referenceSetName {{ reference_assembly_name }}
            --ontologyName {{ sequence_ontology_name }}

- name: Check VSFs Source Folder
  stat: path={{ server_volume_host_dir }}/{{ vcfs_source_folder_name }}
  register: vcfs_source_folder

- name: Download 1000 Genomes VCFs
  command: >
    wget -m {{ vcfs_uri }}
        -nd -P {{ server_volume_host_dir }}/{{ vcfs_source_folder_name }} -l 1
        && rm {{ server_volume_host_dir }}/{{ vcfs_source_folder_name }}/{{ unsupported_wgs_filename }}
        # See http://ga4gh-reference-implementation.readthedocs.io/en/latest/demo.html#add-the-1000-genomes-vcfs
        # for the reason to remove unsupported wgs file
  when: not vcfs_source_folder.stat.exists

- name: Add 1000 Genomes VCFs
  docker:
    image: "{{ server_image_name }}"
    name: "{{ server_container_name }}"
    volumes: "{{ server_volume_host_dir }}:/data:rw"
    command: >
        /usr/local/bin/ga4gh_repo
            add-variantset
            /data/{{ registry_db_filename }}
            1kgenomes
            /data/{{ vcfs_source_folder_name }}
            --name phase3-release
            --referenceSetName {{ reference_assembly_name }}
            
- name: Download a Read Group Set
  get_url:
    url: "{{ read_group_set_index_uri }}"
    dest: "{{ server_volume_host_dir }}/{{ read_group_set_index_source_name }}"
    force: no

- name: Add a BAM as a Read Group Set
  docker:
    image: "{{ server_image_name }}"
    name: "{{ server_container_name }}"
    volumes: "{{ server_volume_host_dir }}:/data:rw"
    command: >
        /usr/local/bin/ga4gh_repo
            add-readgroupset
            /data/{{ registry_db_filename }}
            1kgenomes
            -I /data/{{ read_group_set_index_source_name }}
            --referenceSetName {{ reference_assembly_name }}
            {{ read_group_set_bam_uri }}
